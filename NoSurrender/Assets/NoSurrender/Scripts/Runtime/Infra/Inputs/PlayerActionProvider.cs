using System;
using NoSurrender.Infra.AutoGenerated;
using R3;
using Unity.Mathematics;
using UnityEngine;
using UnityEngine.InputSystem;

namespace NoSurrender.Infra.Inputs
{
	public class PlayerActionProvider : MonoBehaviour, InputMaster.IPlayerActions, IDisposable
	{
		private readonly InputService _service;
		private readonly ReactiveProperty<float2> _move = new();
		private bool _disposed;

		public ReadOnlyReactiveProperty<float2> Move => _move;

		public PlayerActionProvider(InputService service)
		{
			_service = service;
		}

		public void Dispose()
		{
			if (_disposed)
			{
				_disposed = true;

				_move.Dispose();
			}
		}

		public void OnMove(InputAction.CallbackContext context)
		{
			_move.OnNext(context.ReadValue<float2>());
		}

		public void OnLook(InputAction.CallbackContext context)
		{
		}

		public void OnAttack(InputAction.CallbackContext context)
		{
		}

		public void OnInteract(InputAction.CallbackContext context)
		{
		}

		public void OnCrouch(InputAction.CallbackContext context)
		{
		}

		public void OnJump(InputAction.CallbackContext context)
		{
		}

		public void OnPrevious(InputAction.CallbackContext context)
		{
		}

		public void OnNext(InputAction.CallbackContext context)
		{
		}

		public void OnSprint(InputAction.CallbackContext context)
		{
		}
	}
}